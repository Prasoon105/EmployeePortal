package com.example.demo.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

@Entity
@Data
@Table(name = "Employee")
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long empId;

    @NotNull(message = "First name cannot be null")
    @Size(min = 1, message = "First name cannot be empty")
    private String firstName;

    @NotNull(message = "Last name cannot be null")
    @Size(min = 1, message = "Last name cannot be empty")
    private String lastName;

    @Column(name = "birth_date")
    @NotNull(message = "Date of birth cannot be null")
    private Date dob;

    @NotNull(message = "Gender cannot be null")
    @Size(min = 1, message = "Gender cannot be empty")
    private String gender;

    @NotNull(message = "Email cannot be null")
    @Email(message = "Email should be valid")
    @Pattern(regexp = "^[A-Za-z0-9+_.-]+@(.+)$", message = "Invalid email format")
    private String email;

    @NotNull(message = "Contact cannot be null")
    @Size(min = 10, max = 15, message = "Contact number should be between 10 and 15 characters")
    private String contact;

    @Column(name = "hire_date")
    @NotNull(message = "Hire date cannot be null")
    private Date hireDate;

    @NotNull(message = "Salary cannot be null")
    @Min(value = 0, message = "Salary should be greater than or equal to zero")
    private Double salary;

    private Long pManagerId;
    private Long rManagerId;

    @Embedded
    @NotNull(message = "Address cannot be null")
    private Address address;

    @ManyToOne(cascade = { CascadeType.ALL })
    @JoinColumn(name = "department_id")
    @NotNull(message = "Department cannot be null")
    private Department department;

    @ManyToMany(cascade = { CascadeType.ALL })
    @JoinTable(name = "employee_project",
            joinColumns = @JoinColumn(name = "emp_id"),
            inverseJoinColumns = @JoinColumn(name = "p_id"))
    private Set<Project> projects = new HashSet<>();

    // Constructors, getters, setters, toString() (handled by Lombok @Data)
}
